#ifndef __qsapp_h__
#define __qsapp_h__

#include <inttypes.h>
#include <stdbool.h>
#include <stdio.h>


/** \page app quickstream application objects
 *
 * The libquickstream application programming interface (API)
 *
 * You can link your C and C++ code with the libquickstrean library to
 * make quickstream programs that load quickstream filter modules,
 * assemble these filters into flow graphs, and run the flow graphs.
 *
 * You can do the most of the same thing with the program \ref
 * quickstream_program.  \ref quickstream_program with the name
 * quickstream is written with this API.
 *
 * The following terms/words are used in function names and other things:
 *
 * - **qs**     the prefix for all functions in this API.  Other
 *              programming things may have a different case like
 *              \e Qs or \e QS.
 *
 * - **app**    a collection of loaded filter module plugins,
 *              a collection of streams, and
 *              an application container for all that is quickstream
 *
 * - **stream** a directed graph of interconnected filters,
 *              a mapping of filters to threads,
 *              an interface to run the stream
 *
 * - **filter** a filter module plugin from a dynamic shared object
 *              file
 *
 * - **thread**  an operating system thread (pthread)
 *
 * - **source** \anchor source  filters are filters that do not
 *               have connections to them, but may have connections from
 *               them.  Sources are where the flow starts.
 *
 * quickstream functions that do not return an structure pointer, tend to
 * return an int with a value 0 for the common success case.  int return
 * values greater than zero tend to be common none error selective cases
 * and negative return values tend to be selective error cases.
 * Enumerations are provided to interpret them.
 */


/** Returned from qsStreamFilterLoad() and qsAppControllerLoad() in the case
 * where the modules construct() function returned > 0.
 *
 * This is not an error case, it's just that the module, in effect,
 * unloaded itself from its' construct() function by returning greater
 * than zero.  When the construct() function returns less then zero, that
 * is an error case and 0 is returned from qsStreamFilterLoad() or
 * qsAppControllerLoad().
 */
#define QS_UNLOADED     ((void *) -1)



/** quickstream release version number
 *
 * This release version number is not necessarily the same as library
 * version numbers.
 */
// Change this QS_VERSION macro string to make a new version.
// Currently generated from the script file RELEASE.bash.
#define QS_VERSION "@PACKAGE_VERSION@"



/** Tells qsFiltersConnect() to use the next available port.
 *
 */
#define QS_NEXTPORT  ((uint32_t) -2)


/** used in qsStreamLaunch()
 *
 */
#define QS_AUTOMAXTHREADS    ((uint32_t) -2)


/** Read the last quickstream error string
 *
 * Calling this function also clears the current error.  This interface is
 * defective, in that new errors in other threads may overwrite the
 * internal error string before it can be read with this, or by any
 * other thread.  Per-thread error strings create other issues.
 *
 * To clear the current error, if there is one or not, call
 * qsError().  This can be called without checking if there is an
 * error or not.
 *
 * \return a pointer to a string, or 0 if there is no error.  The
 * memory for the string is managed by the qsError() function.
 *
 *  \todo add error return int values that correspond to strings.
 */
extern
const char *qsError(void);


/** Create the highest level quickstream construct,
 * a quickstream app.
 *
 * The quickstream app is a container that manages squickstream streams.
 *
 * \return a pointer to an app structure, or 0 on failure*/
extern
struct QsApp *qsAppCreate(void);


/** destroy a quickstream app object
 *
 * Cleanup the resources like memory and unload loaded filter modules.
 *
 * This should not be called if there are streams flowing.
 *
 * \param app returned from qsAppCreate().
 *
 * \return 0 on success, and non-zero otherwise.
 */
extern
int qsAppDestroy(struct QsApp *app);



/** Load and create a controller module
 * 
 * The environment variable QS_CONTROLLER_PATH may be set to aid in
 * finding filter module plugins.
 *
 * The environment variable QS_MODULE_PATH may also be set to aid in
 * finding filter module plugins with the directory /controllers/ appended
 * to the paths given.
 *
 * \param app that was returned from qsAppCreate()
 * \param filename that refers to the plugin module file.
 * \param loadName a made-up unquie name that was refer to this
 * loaded plugin module.  loadName=0 maybe passed in to have the
 * name generated based on filename.
 * \param argc is the number of string argument in argv.
 * \param argv is 0 or a pointer to an array of strings.  Do not count
 * on argv being 0 (null) terminated.
 *
 * \return a pointer to a controller on success, and 0 on failure.
 * QS_UNLOADED (which is a non-zero invalid pointer) is returned if the
 * controller was unloaded after construct() was called. 
 */
extern
struct QsController *qsAppControllerLoad(struct QsApp *app,
        const char *filename,
        const char *loadName,
        int argc, const char **argv);



/** Unload and destroy a controller module
 *
 * \param controller returned from qsAppControllerLoad().
 *
 * \return 0 on success or non-zero on failure.
 */
extern
int qsControllerUnload(struct QsController *controller);


/** load the controller module and print help()
 *
 * The environment variable QS_CONTROLLER_PATH may be set to aid in
 * finding filter module plugins.
 *
 * The environment variable QS_MODULE_PATH may also be set to aid in
 * finding filter module plugins with the directory /controllers/ appended
 * to the paths given.
 *
 * \param app the quickstream app that was returned from a call to
 * qsAppCreate().
 *
 * \param filename that refers to the plugin module to load.
 *
 * After the module is loaded and help() is called, the module is
 * unloaded.
 *
 * \param file is a standard C library stream file pointer.
 *
 * \return 0 is help() is found and called.
 */
extern
int qsAppControllerPrintHelp(struct QsApp *app, const char *filename,
        FILE *file);




struct QsStream;


/** Load and create a filter module
 *
 * If the filter is successfully loaded and a construct symbol is found
 * the construct() will be called as a function with some arguments.  If
 * construct() is found and called and returns non-zero the module will be
 * unloaded and destroy() will not be called.  If construct() returns
 * greater than zero it will considered a success case.  If construct()
 * returns less than zero it will considered an error case.
 * See
 * \ref construct().
 *
 * The environment variable QS_FILTER_PATH may be set to aid in finding
 * filter module plugins.
 * 
 * The environment variable QS_MODULE_PATH may also be set to aid in
 * finding filter module plugins with the directory /filters/ appended to
 * the paths given.
 *
 * \param stream that was returned from a call to qsAppStreamCreate().
 * \param filename that refers to the plugin module file.
 * \param loadName a made-up unquie name that was refer to this
 * loaded plugin module.  loadName=0 maybe passed in to have the
 * name generated based on filename.
 * \param argc is the number of string argument in argv.
 * \param argv is 0 or a pointer to an array of strings.  Do not count
 * on argv being 0 (null) terminated.
 *
 * \return a pointer to a filter on success, and 0 on failure.
 * QS_UNLOADED (which is a non-zero invalid pointer) is returned if the
 * filter was unloaded after construct was called. 
 *
 * \see qsFilterUnload().
 */
extern
struct QsFilter *qsStreamFilterLoad(struct QsStream *stream,
        const char *filename,
        const char *loadName,
        int argc, const char **argv);


/** Print the help for a filter module
 *
 * \param filename is the filename of the filter module file run
 * help() for.
 *
 * \param file is a standard C library stream file to have the
 * filter's help() print to.
 *
 * \return 0 on success, 1 on error.
 */
extern
int qsFilterPrintHelp(const char *filename, FILE *file);



/** print viscosity levels for qsAppPrintDotToFile() and
 * qsAppDisplayFlowImage().
 */
enum QsAppPrintLevel {
    /** print with less detail */
    QSPrintOutline = 0,
    /** print with more detail
     *
     * To print more detail the streams must be in a ready
     * state.  See qsStreamReady().
     */
    QSPrintDebug = 3
};


/** Print a vizgraph dot image file the represents the stream graphs.
 *
 * \param app an app object that was returned from qsAppCreate().
 *
 * \param l one of \ref QsAppPrintLevel
 *
 * \param file a standard C library buffered stream file to print to.
 *
 * \return 0 on success.
 *
 * \sa QsAppPrintLevel
 */

extern
int qsAppPrintDotToFile(struct QsApp *app, enum QsAppPrintLevel l,
        FILE *file);


/** Display an image of the flow graphs.
 *
 * This will fork and run the imagemagick "display" program.  This calls
 * qsAppPrintDotToFile().
 *
 * \param app an app object that was returned from qsAppCreate().
 *
 * \param l the level of detail to print.  \ref QSPrintOutline to print
 * just an outline and \ref QSPrintDebug to print more inner details.
 *
 * \param waitForDisplay if set this will not return until the
 * display program exits.
 *
 * \return 0 on success.
 */
extern
int qsAppDisplayFlowImage(struct QsApp *app, enum QsAppPrintLevel l,
        bool waitForDisplay);


/** Unload a filter module and cleanup it's resources.
 *
 * qsFilterUnload() will also remove the filter from any stream it has
 * been added to.
 *
 * /return 0 on success.
 */
extern
int qsFilterUnload(struct QsFilter *filter);


/** Create a stream runner object.
 *
 * \param app the app that was returned from qsAppCreate().
 *
 *
 * \return a pointer to a stream.
 */
extern
struct QsStream *qsAppStreamCreate(struct QsApp *app);


/** allow or disallow loops in the stream\
 *
 * By default the stream does not allow loops in the filter stream graph.
 *
 * \param stream is the stream that we are allowing or disallowing loops
 * in.
 *
 * \param doAllow Pass the doAllow value of true to set allowing loops in
 * the stream graph.  Pass in doAllow value of false to not allow loops in
 * the stream graph.
 */
extern
void qsStreamAllowLoops(struct QsStream *stream, bool doAllow);


/** Destroy a stream.
 *
 * This will not unload the filters that are in the stream.
 *
 * /param stream to destroy.
 */
extern
void qsStreamDestroy(struct QsStream *stream);


/** Connect two filters in the stream specifying port numbers.
 *
 * Sometimes the filters are particular about how their output and input
 * ports are connected.  Both input and output port numbers start at 0 and
 * sequentially increase from there, so when qsStreamReady() is called
 * there must be no gaps in the output and input port numbers.
 *
 * \param from filter module that we connect from.
 *
 * \param to filter module that we connect to.
 *
 * \param fromPortNum is the output port number that the "from" filter
 * will see for this connection.
 *
 * \param toPortNum is the input port number that the "to" filter will
 * see for this connection.
 */
extern
void qsFiltersConnect(
        struct QsFilter *from, struct QsFilter *to,
        uint32_t fromPortNum, uint32_t toPortNum);


/** For iterating through filters in a stream or the whole app
 *
 *
 * \param streamOrApp calls the callback for all filters in the stream or
 * for all filters in all streams in an app.
 *
 * \param callback to be called once for each filter.
 *
 * \param userData passed to callback.
 *
 * \return the number of filters callback was called with on success.
 * Returns less than 0 on error.
 */
extern
int qsStreamForEachFilter(void *streamOrApp,
        int (*callback)(struct QsStream *stream,
            struct QsFilter *filter, void *userData),
        void *userData);


/** Get the filter name that was given to this filter module when it was
 * loaded
 *
 * \param filter a pointer to the filter object.
 *
 * \return the filter name string.
 */
extern
const char *qsFilterName(const struct QsFilter *filter);


/** Launch threads and processes if they are needed, and get ready to
 * run the flow.
 *
 * Before returning, put the thread and processes in a blocking call
 * waiting for the flow.
 *
 * \param stream the stream object that has the filters that are
 * connected.
 *
 * \param maxThreads is the maximum number of worker threads that can be
 * used to run the filters in the stream.  Setting maxThreads to
 * QS_AUTOMAXTHREADS with let quickstream try to automatically determine
 * the optimal number of threads to run.
 *
 * \return 0 if the stream runs and non-zero on error.
 */
extern
int qsStreamLaunch(struct QsStream *stream, uint32_t maxThreads);



/** Wait for worker threads to signal the main thread.
 *
 * This should be called after qsStreamLaunch().
 *
 * /return 0 if this waited, or 1 if the stream was not flowing and this
 * did not wait and there is a multi-threaded launch, and -1 if there is
 * not a multi-threaded launch.
 */
extern
int qsStreamWait(struct QsStream *stream);


/** Make ready the stream.
 *
 * Allocate resources for the stream to flow, but not the threads and
 * processes.
 *
 * qsStreamReady() will call all the filter start() functions and setup
 * the resources needed to start the stream flow.
 *
 * One could call qsAppDisplayFlowImage() after a call to
 * qsStreamPrestart() to have a look at the streams while they are setup,
 * but before they are running.  You can call qsAppDisplayFlowImage()
 * after the stream is running, but calling qsStreamReady() and then
 * qsAppDisplayFlowImage() will produce the same image without calling any
 * filter input() calls.
 *
 * \param stream the stream object that has the filters that are
 * connected.
 *
 * \return 0 if the stream runs and non-zero on error.
 */
extern
int qsStreamReady(struct QsStream *stream);



/** Stop the flow
 *
 * For a given stream qsStreamStop() be called after qsStreamReady()
 * and/or after qsStreamLaunch().
 *
 * \param stream the stream object that has the filters that are
 * connected.

 * \return 0
 */
extern
int qsStreamStop(struct QsStream *stream);


/** Stop feeding the source filters in the stream
 *
 * After this is called the stream should quickly finish flowing, that is
 * if this is a well behaved quickstream stream.
 *
 * This can be called in the users signal handler to stop the flow in a
 * nice way, letting all the non-source filters finish flushing whatever
 * data is left in the stream after the sources stop feeding it.
 *
 *  \param stream the stream object that has the filters that are
 *  connected.
 */
extern
void qsStreamStopSources(struct QsStream *stream);


/** Set a level of verbosity for libquickstream.so
 *
 * A well conditioned library should not write to standard error output.
 * Doing so should be considered intrusive, and would require users to
 * make work-a-rounds in order to use standard error in their code.
 * In developing libquickstream.so we found it necessary to use standard
 * error in order to watch the code as it runs.  Users of
 * libquickstream.so may remove such "error spew" automatically just not
 * defining CPP macros when the library is compiled.
 *
 * \param level from 0, less, to 5 , more verbose.
 */
extern
void qsSetSpewLevel(int level);

/** Get the level of verbosity for libquickstream.so that was compiled in
 *
 * \return a number from 0, being silent, to 5, being very verbose.
 */
extern
int qsGetLibSpewLevel(void);

#endif // #ifndef __qsapp_h__
